type Query {
  # Returns the currently logged in user.
  me: User

  # Returns a competition by id.
  competition(id: NumericalID!): Competition!

  # Returns all datapoints supported
  datapoints: [Datapoint!]!

  team(id: NumericalID!): Team

  # Returns all competitions th
}

type Mutation {
  # Imports a competition from the WCA website. Either the user can import the comp under their creds or a team/org user can import it under the team/org.
  importCompetition(
    wcaId: String!
    teamId: NumericalID
    orgUserId: NumericalID
  ): Competition!

  # Creates a flow. If a competitionId is specified, then the flow is linked to a competition. If a templateId is specified then the flow will be created from the template.
  createFlow(competitionId: NumericalID, templateId: NumericalID): Flow!

  linkAndUpsertOrgUser(
    teamId: NumericalID!
    email: String!
    password: String!
    importComps: Boolean
  ): User!
}

scalar NumericalID
scalar DateTime
scalar Date

type User {
  id: NumericalID!
  name: String!
  email: String

  createdAt: DateTime
  updatedAt: DateTime
  lastLogin: DateTime

  Competitions(after: String, before: String): [UserCompetitionMap!]
  Items: [Item!]
  Credentials: Credentials

  # list of all competitions that can be imported
  # these are competitions managed by this user that are not already imported
  importableCompetitions: [WCA_API_Competition!]

  missingCredentials: Boolean
}

type Credentials {
  userId: NumericalID!
  accessToken: String!
  refreshToken: String!
  expiresAt: DateTime!
}

type Competition {
  id: NumericalID!
  name: String!
  flowId: NumericalID
  status: CompetitionStatus!
  metadataId: NumericalID

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  Flow: Flow
  Metadata: CompetitionMetadata
  Users: [UserCompetitionMap!]
}

type CompetitionMetadata {
  id: NumericalID!
  wcaId: String
  updatedByUserId: NumericalID

  announced: Boolean
  startDate: String
  endDate: String

  createdAt: DateTime!
  updatedAt: DateTime!

  UpdatedByUser: User
}

type UserCompetitionMap {
  competitionId: NumericalID!
  userId: NumericalID!
  roles: [UserCompetitionRole!]!

  Competition: Competition
  User: User
}

type Team {
  id: NumericalID!
  name: String!

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  Competitions: [Competition!]
  Members: [TeamMemberMap!]
  Templates: [Template!]
  OrgUsers: [User!]
  Items: [Item!]
}

type TeamMemberMap {
  teamId: NumericalID!
  userId: NumericalID!
  role: TeamMemberRole!

  Team: Team!
  User: User!
}

# Task Management:

type Flow {
  id: NumericalID!
  competitionId: NumericalID!
  templateId: NumericalID!
  name: String!

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  Items: [Item!]!
  Template: Template!
  Competition: Competition
}

# Items can belong directly to a flow, team, user, etc..
type Item {
  id: NumericalID!
  parentItemId: NumericalID
  itemTemplateId: NumericalID
  flowId: NumericalID
  teamId: NumericalID
  type: ItemType!
  order: Int!
  name: String!
  description: String
  deadline: Date
  taskStatus: String
  dataPointId: NumericalID
  dataPointValue: String

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  Assignees: [User!]!
  Flow: Flow!
  Template: Template
  Datapoint: Datapoint
  Team: Team!
  ParentItem: Item
  ChildItems: [Item!]!
}

type Template {
  id: NumericalID!
  name: String!
  belongsToUserId: NumericalID
  belongsToTeamId: NumericalID

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  Items: [Item!]!
  BelongsToUser: User
  BelongsToTeam: Team
}

type ItemTemplate {
  id: NumericalID!
  templateId: NumericalID!
  parentItemId: NumericalID
  type: ItemType!
  order: Int!
  name: String!
  description: String
  relativeDeadline: Date
  dataPointId: NumericalID

  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  Template: Template!
  ParentItem: ItemTemplate
  ChildItems: [ItemTemplate!]!
  Datapoint: Datapoint
}

type Datapoint {
  id: NumericalID!
  key: String!
  type: JSONType!
  validation: Validation
}

enum UserCompetitionRole {
  Delegate
  Organizer
}

enum TeamMemberRole {
  Member
  Leader
}

enum ItemType {
  Category
  Task
  Datapoint
  Note
}

enum CompetitionStatus {
  Potential
  Planning
  Announced
}

enum JSONType {
  String
  Number
  Boolean
}

enum Validation {
  Date
  Nonzero
  CountryIso2
}

# WCA API Types:

type WCA_API_Competition {
  id: String!
  name: String!
  short_name: String!
  start_date: String!
  end_date: String!
}
